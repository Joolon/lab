# 指定解释器程序，必须单独占一行，不能有其他东西

#!/bin/bash

# 作为可执行程序
# chmod +x inner_test  给予可执行权限
# ./inner_test 1 2 3 4 5 6


# -e 开启转义，\n 换行，\c 不换行（只对当前单条语句有效）

echo -e "\n\n\n";
echo -e "My name is: \c";
echo "Jolon";

echo -e "\n\n\n";
echo -e "当前时间为：\c";
echo `date`;

echo "It is a test" > myfile;


echo -e "\n\n\n";

echo "作为可执行程序传递参数";
echo "执行的文件名为：$0"; # 注意 这里文件名也当做参数了
echo "第一个参数为：$1";
echo "第二个参数为：$2";
echo "第三个参数为：$3";

echo "总参数的个数：$#";
echo "所有传递的参数，作为字符串显示：$*";#  $* 把传递的参数当做一个参数
echo "所有传递的参数，作为带双引号的字符串显示：$@";# $@ 把传递的参数当做多个参数
echo "当前脚本进程的ID：$$";


echo "如果参数不存在的话 也不会报错的";

echo "---- \$* 演示 ----";
for i in "$*"; do
    echo $i;
done;

echo "---- \$@ 演示 ----";
for i in "$@"; do
    echo $i;
done;




echo -e "\n\n\n";


echo "---- 演示数组 array_name=(a b c defghi) ----"
array_name=(a b c def);

echo "数组元素的个数：${#array_name[*]}";
echo "数组元素的个数：${#array_name[@]}";
echo "数组第2个元素：${array_name[1]}";
echo "数字指定元素的长度：${#array_name[3]}";
echo "数组所有元素：${array_name[@]}";





echo -e "\n\n\n";



# expr 是一个表达式运算工具，用 `` 符号包括，表达式和运算符之间要有空格
#       var=`expr 2 + 3`   var的值为5

var=`expr 2 + 3`
echo "expr 2 + 3 表达式：$var "


echo -e "\n\n\n";



echo "假设： a=26 b=5"
a=26
b=5

echo "算术运算符（加、减、乘、除、取余、赋值、相等、不相等）";

if [ $a == $b ]
then
    echo "$a 等于 $b"
fi

if [ $a != $b ]
then
    echo "$a 不等于 $b"
fi



echo "关系运算符"
# eq 等于 equal
# ne 不等于 not equal
# gt 大于 greater than
# lt 小于 less than
# ge 大于等于 greater than
# le 小于等于 less than

if [ $a -eq $b ]
then echo "$a 等于 $b"
else echo "$a 不等于 $b"
fi

if [ $a -gt $b ]
then
    echo "$a 大于 $b"
else
    echo "$a 不大于 $b"
fi



echo "布尔运算符（与、或、非）"
# !   非运算
# -o  或运算
# -a  与运算

if [ $a -lt 25 -o $b -gt 5 ]
then
    echo "$a 小于 25 或 $b 大于 5：true"
else
    echo "$a 小于 25 或 $b 大于 5：false"
fi

if [ $a -lt 25 -a $b -gt 5 ]
then
    echo "$a 小于 25 且 $b 大于 5：true"
else
    echo "$a 小于 25 且 $b 大于 5：false"
fi




echo  "逻辑运算符（逻辑与、逻辑或） 和 布尔运算符类似，或者说 布尔运算符是逻辑运算符的一种"
# && 逻辑与
# || 逻辑或

if [[ $a -lt 100 && $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi

if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi




echo "字符串运算符（=、!=、-z、-n、$）"

# =     字符串是否相等
# !=    字符串是否不相等
# -z    字符串长度是否为0，为0返回true
# -n    字符串长度是否不为0，不为0返回true
# $     字符串是否为空

echo "假设 a=abc b=abd"
if [ $a = $b ]
then
    echo "$a = $b"
else
    echo "$a != $b"
fi


if [ $a != $b ]
then
    echo "$a != $b"
else
    echo "$a = $b"
fi

if [ -z $a ]
then
    echo "-z ：$a 字符串长度为 0"
else
    echo "-z ：$a 字符串长度不为 0"
fi

if [ -n $a ]
then
    echo  "-n ：$a 字符长长度不为 0"
else
    echo "-n ：$a 字符串长度为 0"
fi


echo "文件测试运算符（用于检测文件的各种属性）"
# -e file 检测文件 file 是否存在
# -b file 检测文件 file 是否是块设备文件
# -c file 检测文件 file 是否是字符设备文件
# -d file 检测文件 file 是否是目录
# -r file 检测文件 file 是否可读
# -w file 检测文件 file 是否可写
# -x file 检测文件 file 是否可执行
# -s file 检测文件 file 是否为空（有一个字符就不为空）

if [ -x inner_test ]
then echo "文件 inner_test 可执行"
else echo "文件 inner_test 不可执行"
fi

if [ -e inner_test_001 ]
then echo "文件 inner_test_001 存在"
else echo "文件 inner_test_001 不存在"
fi






echo -e "\n\n\n";
echo "printf 函数（输出内容、格式化字符串、不会换行）";
# 格式化字符
# %s 格式化字符串（%8s  %-8s）
# %c 格式化字符（%c 格式化为一个字符串，如果有多个字符的字符串只显示第一个字符）
# %d 格式化数字
# %f 格式化浮点数
# - 左对齐，没有则默认右对齐

# 转移字符
# \a 警告字符（相当于什么都没有）
# \b 退格
# \f 换页
# \n 换行
# \r 回车
# \t 水平制表符
# \v 垂直制表符


printf "%-10s %-8s %-4.2s\n" 姓名 性别 体重kg
printf "%-10s %-8s %-4.2f\n" 郭靖 男 66.1234
printf "%-10s %-8s %-4.2f\n" 杨过 男 48.6543
printf "%-10s %-8s %-4.2f\n" 郭芙 女 47.9876




echo -e "\n\n\n";


echo "if-else 语句";
echo "if else：if then else fi";

# if else：if then else fi
if [ $a -lt $b ]
then echo " $a 小于  $b "
else echo " $ a 不小于 $b "
fi

echo "if else-if else：if then elif then else fi";

# if else-if else：if then elif then else fi
if [ $a -lt $b ]
then echo " $a 小于 $b "
elif [ $a == $b ]
then echo " $a == $b "
else echo " $a 大于 $b "
fi

echo "for 语句";
echo "for var in 1 2 3 4 "
for var in 1 2 3 4
do
    echo $var
done


echo "for var in array_name(10 20 30 40) "
array_name=(10 20 30 40);
for var in $array_name
do
    echo $var
done


echo "while 语句：  ((  )) 这两个括号之间不能有空格，否则会报错";
echo "输出 1 到 5 的数字："
int=1
#
while (( $int <= 5 ))
do
    echo $int;
    int=`expr $int + 1`
done


echo "按下 <CTRL-D> 退出";
echo "请输入信息：";

while read film
do
    if [ $film != "none" ]
    then
        echo "您输入了：$film ";
    else
        echo "您退出了输入！"
        break;
    fi
done


echo "无限循环";
while true
do
    echo `date`
    break
done


echo  "until 循环：直到变成真时退出，跟 while 非常相似";


echo "case 多选择语句：;; 选择结束符，* 无一匹配模式， 3|4 匹配到3或4"
echo "请输入 1 到 4 之间的数字："
read aNum
echo "您输入的数字为："

:<<'
case aNum in
    1) echo "1";
    ;;

    2) echo "2";
    ;;

    3|4) echo "3 或 4";
    ;;

    # * 表示无一匹配模式
    *) echo $aNum;
    echo "您输入的数字超过了范围";

esac;
'

echo "\n\n\n";
echo "开始数字游戏："
while true
do
    echo "请输入一个 0 到 9 之间的数字，然后按[Enter]键确认："
    read uNum
    case $uNum in
         1|3|5|7|9) echo "您输入了一个奇数";
         ;;

         2|4|6|8|0) echo "您输入了一个偶数"
         ;;

         *) echo "您输入的数据太大了"
         break;
     esac
done















