#!/bin/bash  指定解释器程序

# echo       用来输出内容到窗口、文件（双引号可以省略，效果完全一样）
# printf     输出内容、格式化字符串，不会自动换行（添加 \n 使其换行）
# readonly   只读变量（将变量定义为只读变量，其值不能被改变  错误提示：-bash: myurl: readonly variable）
# unset      删除变量（不能删除 只读变量）
# read user_input 从标准输入中读取一行并赋值给 user_input 变量
# test       测试命令，用来检查某个条件是否成立，可以进行数值、字符串、文件三个方面进行测试
# Here Document   跟PHP类似，格式 <<EOF  ... EOF


# 变量

# 定义变量
# 1、变量名和等号之间不能有空格（如果有空格 就相当于 执行命令了，如 myname = "jolon" 就是用 myname 命令执行 后面的语句）
# 2、命名只能使用英文字母，数字和下划线，首个字符不能以数字开头（不需要带 $ 符号）
# 3、不能使用标点符号和shell保留的关键字


# 变量赋值方式
# 1、显示赋值（用 = 符号）
# 2、语句给变量赋值（for ）


# 变量类型
# 1、局部变量（仅在当前脚本中有效）
# 2、环境变量（所有程序都能访问）
# 3、shell变量（shell程序特殊的变量，可能是局部变量也可能是环境变量）


# 使用变量
# 变量名 前面加上  $ 符号即可
# 推荐给所有变量加上花括号，这是个好的编程习惯

# 注意：定义变量、重新赋值、改变只读、删除变量  都不能带 $ 符号，只有使用的时候才能加 $ 符号。




# 字符串：字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。
        单引号里面不能解释变量和转义字符，双引号可以解释变量和转义字符

# 字符串函数
# echo ${#string}  获取字符串的长度
# echo ${string:1:4}  截取字符串，从第2个字符开始截取4个字符
# echo `expr index "$string" io`  查找字符串，查找 i 或 o 的位置


# 数组：bash 只支持一维数组，不支持多维数据。不限定数组的大小，数组元素下标从0开始计数，数组元素用"空格"符号分隔开。

# 数组函数
# echo ${array_name[2]}     读取数组的索引为2 的元素
# echo ${array_name[@]}     读取数组的所有元素
# echo ${#array_name[@]}    计算数组元素的个数
# echo ${#array_name[n]}    计算数组指定元素的长度（类似于字符串的长度）


# 注释
# 1、单行注释：以 # 开头的行就是注释，会被解释器忽略。
# 2、多行注释：以 :<<EOF ... EOF  或 :<<' ... ' 开头来包括代码达到注释的目的。


# 运算符

# 算术运算符（加、减、乘、除、取余、赋值、相等、不相等）
# 关系运算符
# 布尔运算符
# 字符串运算法
# 文件测试运算法

运算符优先级关系： 算术运算符 > 关系运算符



日期函数  `date`



控制语句（逻辑和 PHP 是一样的，只是语法不一样）
# if-else   语句（else 分支语句里面不能为空（如 else { // 什么都不做 }），如果为空就不要写else）
# for       语句
# while     语句（没有 do-while 语句）
# until     语句
# case-esac 语句
# break     语句
# continue  语句



# 函数
# function myFunName()  或者 myFunName() 来定义
# return    是显示返回值，如果没有return 语句则是隐式返回值，将函数最后一条语句的结果当做返回值
# myFunName 调用函数仅使用其函数名即可。
# myFunName 1 2 3   在函数体内部，通过 $n 的形式来获取参数的值，例如，$1表示第一个参数，$2表示第二个参数，当n>=10时，需要使用${n}来获取参数
# $?        在函数执行之后通过 "$?" 来获取函数返回值（使用方式和 变量 一样）
#           只能在函数执行之后立即获取返回值，如果中间执行了其他代码就获取不到了，应该被覆盖了吧
#           如果获取了一次之后，再次获取 也是获取不到的
#
#           function demoFun1(){
#               echo "这是我的第一个 shell 函数!"
#               return `expr 1 + 1`
#           }
#
#           demoFun1
#           echo $?  # 结果为 2
#           echo $?  # 结果为 0，因为被上面一条覆盖
#
# shell 语言中 0 代表 true，0 以外的值代表 false。（这个和 PHP是相反的呀，是不是很有意思？）




# 重定向输入/输出
# 标准输入和标准输出  是指 终端的输入和输出

# command > file  将命令 command 的结果存入 file 文件（会覆盖 file 文件的内容）
# command >> file 将命令 command 的结果存入 file 文件（文件末尾追加的方式）
# command < file  将 file 文件的内容



# 文件包含
# 封装一些独立的代码到单独的文件中，方便使用
# 使用方式：source filename  或者 . filename





