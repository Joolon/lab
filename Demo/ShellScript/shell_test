
#!/bin/bash  指定解释器程序
# echo       用来输出内容
# readonly   只读变量（将变量定义为只读变量，其值不能被改变  错误提示：-bash: myurl: readonly variable）
# unset      删除变量（不能删除 只读变量）


# 变量

# 定义变量
# 1、变量名和等号之间不能有空格（如果有空格 就相当于 执行命令了，如 myname = "jolon" 就是用 myname 命令执行 后面的语句）
# 2、命名只能使用英文字母，数字和下划线，首个字符不能以数字开头（不需要带 $ 符号）
# 3、不能使用标点符号和shell保留的关键字


# 变量赋值方式
# 1、显示赋值（用 = 符号）
# 2、语句给变量赋值（for ）


# 变量类型
# 1、局部变量（仅在当前脚本中有效）
# 2、环境变量（所有程序都能访问）
# 3、shell变量（shell程序特殊的变量，可能是局部变量也可能是环境变量）


# 使用变量
# 变量名 前面加上  $ 符号即可
# 推荐给所有变量加上花括号，这是个好的编程习惯

# 注意：定义变量、重新赋值、改变只读、删除变量  都不能带 $ 符号，只有使用的时候才能加 $ 符号。




# 字符串：字符串是shell编程中最常用最有用的数据类型，字符串可以用单引号，也可以用双引号，也可以不用引号。
        单引号里面不能解释变量和转义字符，双引号可以解释变量和转义字符

# 字符串函数
# echo ${#string}  获取字符串的长度
# echo ${string:1:4}  截取字符串，从第2个字符开始截取4个字符
# echo `expr index "$string" io`  查找字符串，查找 i 或 o 的位置


# 数组：bash 只支持一维数组，不支持多维数据。不限定数组的大小，数组元素下标从0开始计数，数组元素用"空格"符号分隔开。

# 数组函数
# echo ${array_name[2]}     读取数组的索引为2 的元素
# echo ${array_name[@]}     读取数组的所有元素
# echo ${#array_name[@]}    计算数组元素的个数
# echo ${#array_name[n]}    计算数组指定元素的长度（类似于字符串的长度）


# 注释
# 1、单行注释：以 # 开头的行就是注释，会被解释器忽略。
# 2、多行注释：以 :<<EOF  或 :<<' 开头来包括代码达到注释的目的。


# 运算符

# 算术运算符（加、减、乘、除、取余、赋值、相等、不相等）
# 关系运算符
# 布尔运算符
# 字符串运算法
# 文件测试运算法

运算符优先级关系： 算术运算符 > 关系运算符


# expr 是一个表达式运算工具，用 `` 符号包括，表达式和运算符之间要有空格
#       var=`expr 2 + 3`   var的值为5


echo "假设： a=26 b=5"
a=26
b=5

echo "算术运算符（加、减、乘、除、取余、赋值、相等、不相等）";

if [ a == b]
then
    echo "$a 等于 $b"
fi

if [ a != b]
then
    echo "$a 不等于 $b"
fi



echo "关系运算符"
# eq 等于 equal
# ne 不等于 not equal
# gt 大于 greater than
# lt 小于 less than
# ge 大于等于 greater than
# le 小于等于 less than

if [ a -eq b]
then echo "$a 等于 $b"
else echo "$a 不等于 $b"
fi

if [ a -gt b]
then
    echo "$a 大于 $b"
else
    echo "$a 不大于 $b"
fi



echo "布尔运算符（与、或、非）"
# !   非运算
# -o  或运算
# -a  与运算

if [ a -lt 25 -o b -gt 5]
then
    echo "$a 小于 25 或 $b 大于 5：true"
else
    echo "$a 小于 25 或 $b 大于 5：false"
fi

if [ a -lt 25 -a b -gt 5]
then
    echo "$a 小于 25 且 $b 大于 5：true"
else
    echo "$a 小于 25 且 $b 大于 5：false"
fi




echo  "逻辑运算符（逻辑与、逻辑或） 和 布尔运算符类似，或者说 布尔运算符是逻辑运算符的一种"
# && 逻辑与
# || 逻辑或

if [[ $a -lt 100 && $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi

if [[ $a -lt 100 || $b -gt 100 ]]
then
   echo "返回 true"
else
   echo "返回 false"
fi




echo "字符串运算符（=、!=、-z、-n、$）"

# =     字符串是否相等
# !=    字符串是否不相等
# -z    字符串长度是否为0，为0返回true
# -n    字符串长度是否不为0，不为0返回true
# $     字符串是否为空

echo "假设 a=abc b=abd"
if [ a = b ]
then
    echo "$a = $b"
else
    echo "$a != $b"
fi


if [ a != b ]
then
    echo "$a != $b"
else
    echo "$a = $b"
fi

if [ -z a]
then
    echo "-z ：$a 字符串长度为 0"
else
    echo "-z ：$a 字符串长度不为 0"
fi

if [ -n a]
then
    echo  "-n ：$a 字符长长度不为 0"
then
    echo "-n ：$a 字符串长度为 0"
fi


echo "文件测试运算符（用于检测文件的各种属性）"
# -e file 检测文件file是否存在
# -b file 检测文件file是否是块设备文件
# -c file 检测文件file是否是字符设备文件
# -d file 检测文件file是否是目录
# -r file 检测文件file是否可读
# -w file 检测文件file是否可写
# -x file 检测文件file是否可执行
# -s file 检测文件file是否为空

if [ -x inner_test ]
then echo "文件 inner_test 可执行"
else echo "文件 inner_test 不可执行"
fi

if [ -e inner_test_001 ]
then echo "文件 inner_test_001 存在"
else echo "文件 inner_test_001 不存在"
fi

















