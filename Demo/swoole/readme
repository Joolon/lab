Swoole：让 PHP 无所不能（高性能异步并发）

概述：
    Swoole 是一个PHP的协程高性能的网络通信引擎，通过C/C++语言编写，提供了多种网络协议的网络服务器端和客户端模块。
可以快速方便的实现 TCP/UDP服务、高性能Web、WebSocket服务、物联网、实时通信、游戏、微服务等，使PHP 不在局限于传统的Web领域。
Swoole4 协程的成熟将 PHP 带入了前所未有的时期， 为性能的提升提供了独一无二的可能性。




Swoole\Server  是所有异步服务器的基类，Http\Server,WebSocket\Server,Redis\Server 等都是继承该类。
可以用 swoole 实现 redis 的功能，和实际操作 reids 服务器是一样的。
服务器风格：协程风格、异步风格。
协程：是为了提高并发的，相对同步IO来说 并发能力得到了很大的提升。



运行：
1、支持的操作系统：Linux、FreeBSD、MacOS
2、Swoole 提供的绝大的部分模块只能用于 cli 命令行终端。


Windows 环境搭建swoole ：
    windows环境是不支持swoole的，搭建非常麻烦，Windows 10可以利用自带的Ubuntu系统获得支持，Windows 10以下可以使用Cygwin来搭建（没有亲身实践）。
    其他方法：
        https://jingyan.baidu.com/article/63f23628664adc0209ab3d4c.html
        https://www.cnblogs.com/itsuibi/p/8995137.html

    Cygwin ：Windows平台上运行的类 UNIX 模拟环境；它对于学习UNIX/Linux操作环境，或者从UNIX到Windows的应用程序移植，
        或者进行某些特殊的开发工作，尤其是使用GNU工具集在Windows上进行嵌入式系统开发，非常有用。
        随着嵌入式系统开发在国内日渐流行，越来越多的开发者对Cygwin产生了兴趣。







Ubuntu 18.04.14 LTS 系统上的使用：

安装 swoole ：
    官方安装教程 https://wiki.swoole.com/#/environment
    安装 swoole ：  sudo pecl install swoole 一键搞定
    最后，编译安装成功后，修改 php.ini 加入  extension=swoole.so  （如果不确定 php.ini 文件在哪里可以使用 php --ini 查看文件的绝对路径，进去修改）

    执行 php -m 查看安装的模块，发现已经有了 swoole 说明安装成功。（如果 php -m 一直看不到 swoole 的话那就有可能是 php.ini 文件没改正确）
    执行 php --ri swoole 查看 swoole 拓展信息


使用：

$http = new Swoole\Http\Server("172.18.235.99", 9501);

# 监听 IP 地址发起的请求，即是当这个指定的 IP 客户端发起请求，swoole 服务才会响应，其他 IP 的客户端不响应
（这就和 直接访问 PHP 文件实现响应不同了，访问 PHP 文件都会响应，只是返回的内容不同，HTTP 状态还是 200 的
改变 IP 后需要重启 swoole 服务才生效，还有自动重启的方式 不影响用户的正常使用）

如果从服务器上退出 服务 则浏览器将变得不可访问。
一个端口 只能被用于一个服务，如果其他服务已经占用该端口，则当前无法监听该端口。
比如 http服务 9501，TCP服务9502，可以通过不同端口访问不同服务。



Swoole Server 是异步服务器，所以是通过监听事件的方式来编写程序的。不同类型的服务监听的时间也是不一样的。


常见问题处理：

1、php tcp_server.php   提示端口被占用（一般是退出方式不正确，退出服务器时用 Ctrl + C 退出 就没问题了）

 启动服务时提示错误 WARNING swSocket_bing(172.18.235.99:9502) Failed Error Address already in use （端口已经占用）
 解决：查看端口占用情况  netstat -anp | grep 9502
 得到占用进程： kill 920    (查看到 920/php 字样：920 是进程号，可以通过该进程号 杀死进程；php 表示为php的进程  )
 重新启动服务即可。

 kill -s 9 port 强制杀死进程


 TCP 与 UDP ：
	UDP是无连接的，TCP是有连接的；
	TCP服务器关闭后，客户端会强制退出，不能再发送服务；
	UDP服务器关闭后，客户端不会强制退出，向服务器发送消息服务器不会做出响应，也不会提示错误。



















