包装


系统架构设计：
	一个系统的如何运作、运作得如何，都要能提前设想出来。
	很多人梦想成为大牛，但做起事情来跟犁田的牛没什么区别，他们认为“我的任务就是按时完成任务，至于代码写的怎么样，能用就行”，这种想法是错误的。
	
优点：
	代码逻辑清晰，使用面向对象设计方式开发程序，复用性高，维护起来简单，冗余代码较少（别人的代码，面向过程开发，同一个逻辑会写个十几遍，开发效率低，维护起来困难，而且不便于拓展功能和查找问题）
	
	优秀的程序员写出的代码，你能感知到一种建筑式的美感，而不是干巴巴的，像是村里的施工队搭的房子。
	我觉得优秀的程序员不一定是知道所有问题，而是遇到问题能够找到解决办法，有独立解决问题的能力。
	
	
	岗位是项目经理，本人在这行工作了10来年了，程序员、架构师、项目经理都做过，小项目从需求到最后验收全程自己一个人搞定也没问题。
	开发和管理都OK，做了而是多年的项目经理，做过千万级的项目，也带过三十多个人的团队。
	自己的能力与年龄要同步增加，才能保持稳定的受青睐的机会，个人能力的提升才是保持自身价值的关键。
	
	我后来发现这个考试，我纯属一种可以以后在名片上印上CFA字样的职业虚荣。我发现在三十多岁以后的所有猎头电话和面试中，没有人关注过这个问题，他们关注的是我在领域里有哪些著名项目经验，以及我管过多少下属。
	
	在易佰呆了四年，这四年里基本上只做了采购云系统，秉承做好一个产品、做好一个服务的态度，践踏实地做好每一件事情，事实上我也做的不错，得到用户的认可。
	
	
	我认识的另一个人是程序员，一些大小漏洞bug或者一些紧急安排的项目，我那位朋友都能够在第一时间内完成。
	
	
	一定不能在简历制作中单纯使用「熟悉」、「精通」来描述自己的能力。应该用附加的项目成果，或者使用某种语言写了哪些项目来说明你对语言的掌握程度，而不是仅仅只说一句「熟悉XX语言」「精通XX工具的使用」。
	
	
	一款产品，一般产品经理设计40%，程序员设计20%，其它人设计40%。程序员拿到产品，要搞清楚客户需求、业务逻辑、功能间的关系、数据流和交互方式等，这些是程序员对产品需求的理解，更是对产品功能的细化。如果程序员有做这个步骤，在开发之前，就能找出产品中隐藏的问题和设计上的错误，就不需要产品经理反反复复的过来改需求。
	中级程序员只能负责模块，对完整的项目玩法是搞不清楚的，搞定完整项目是高级程序员的能力范围。
	
	
我的优点：逻辑分析能力  工作细心  认真负责
	案例：比我工作经验多两年的高级工程师解决不了的问题，我可以解决。比如之前有一个本应该显示一级产品线显示了二级产品线的问题，本来是他和另外一个工程师开发的项目，但是他负责处理了一个月都没有彻底搞定，增加了日志、查看了MySQL日志等等方法都没有找到问题，单独写了个计划任务把不是一级产品线的数据自动排查修复，但依然不能彻底避免异常数据，还经常发生，给出的答复是无法解决。业务反馈数据无法信赖，后面我着手处理。对单据源头、业务变更节点增加日志，记录数据前后变化的趋势，经过逐步确认，认真推理可能产生问题的节点，在一个礼拜能找到了问题根源，修复后再未出现。
	因为我把这个事情当做自己的事，而不仅仅是一份工作，做的好做不好都无所谓，无法修复这个答案在我这里是不够的。不会无缘无故的恨，也不会有无缘无故的爱，所以也不会无缘无故的数据。

	我可能不会拥有所有技能，但是我有一颗学习的心态，善于解决遇到的问题。现有技能不能满足当前的工作时，我会学习新的技术应用到工作中。
	
	
	有些人自己写的代码都找不到问题，更别说解决别人代码里的问题了。
	
	




全栈工程师：
	1、UI H5+CSS
	2、前端 JS
	3、数据库 MySQL
	4、后端 PHP
	5、服务器搭建与配置 Linux
	6、理解业务需求
	7、用户体验
	
拥有的能力：
	1、开发前的客户和业务理解能力
	2、产品分析和设计能力
	3、开发过程中的系统架构能力
	4、代码开发能力
	5、数据库能力
	6、单元测试能力
	7、部署能力
	8、运维、安全、性能提升能力
	
	

理想团队配置：
	1个产品
	2个web
	3个PHP
	
	
后端框架：Django, Flask, Tornado
前端框架：Vue, React, jQuery
数据库：Redis, MySQL
工具：Docker, Jenkins, Git
其他：HTTP, TCP/IP, WebSocket
外语：大学英语四级，能流畅阅读英文文档

使用什么工具： 使用 Scrapy 开发异步爬虫系统
实现什么功能： 构建 IP 代理池，优化爬虫策略和防屏蔽规则
结果怎么样： 提升 200% 网页抓取速度




技术架构的选择：
	1、技术选型要贴近市场标准，被广泛任何的框架，入手容易
	2、语法简单易懂，开发成本低
	3、性能良好
	4、拓展性良好
	5、网络资源多，遇到问题能查到解决办法






简历
介绍技术：最近几份工作经历中所参与过的产品、项目、角色 
在工作中做的项目的技术细节
克服过的技术难点与细节
感兴趣的技术
在程序马拉松上参加的项目或者是业余的个人项目（+link）
如果领导过技术团队，写下带的团队的规模与管理风格
介绍自己：过往有特点经历、擅长的方向、对互联网的理解、职业发展规划
	
	
	
	
HTML:
	能够制作一定程度的界面外观
	
带宽：指单位时间内信号能够传输的数据量


表单验证
我们应该尽可能的对用户的输入进行验证（通过客户端脚本）。浏览器验证速度更快，并且可以减轻服务器的压力。

如果用户输入需要插入数据库，您应该考虑使用服务器验证。在服务器验证表单的一种好的方式是，把表单的数据传给当前页面（异步提交的方式更好），而不是跳转到不同的页面。这样用户就可以在同一张表单页面得到错误信息。用户也就更容易发现错误了。

为了防止黑客及垃圾信息我们需要在处理PHP表单时我们需要考虑安全性。




	
	
	
验证邮件
!preg_match("/([\w\-]+\@[\w\-]+\.[\w\-]+)/",$email)

验证URL
!preg_match("/\b(?:(?:https?|ftp):\/\/|www\.)[-a-z0-9+&@#\/%?=~_|!:,.;]*[-a-z0-9+&@#\/%=~_|]/i",$website)












